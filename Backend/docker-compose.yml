services: 
  redis:
    image: redis:6
    container_name: redis_service
    ports:
      - "6379:6379"
    networks:
      - backend_network
    restart: always

  rabbit-mq:
    image: rabbitmq:3-management
    container_name: rabbit_mq
    ports:
      - "5672:5672"   # RabbitMQ mesajlaşma portu
      - "15672:15672" # Yönetim arayüzü portu
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest  
    networks:
      - backend_network
    restart: always

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    environment:
      - REDIS_HOSTS=local:redis_service:6379
    ports:
      - "8081:8081"
    networks:
      - backend_network
    depends_on:
      - redis
    restart: always

  chatbot-service:
    build: 
      context: ./chatbot-service
      dockerfile: Dockerfile
    container_name: chatbot_service
    ports:
      - "8001:8000"
    env_file:
      - ./chatbot-service/.env
    environment:
      - REDIS_HOST=redis_service
    depends_on:
      - redis
    restart: always
    networks:
      - backend_network

  postgres:
    image: postgres
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: license_plate_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network

  license-plate-service:
    build:
      context: ./license-plate-service
    container_name: license_plate_service
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres/license_plate_db
      - DEBUG=True
    volumes:
      # Kod değişikliklerinin otomatik yansıması için yerel kod dizinini konteyner içine bağla
      - ./license-plate-service/app:/app/app
      - ./license-plate-service/.env:/app/.env
      # Debug görüntülerinin yerel ortamda görülebilmesi için debug klasörünü de bağla
      - ./license-plate-service/debug_images:/app/debug_images
    depends_on:
      - postgres
    networks:
      - backend_network

  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user_service
    ports:
      - "8080:8080"
    restart: always
    networks:
      - backend_network

  navigation-service:
    build: 
      context: ./navigation-service
      dockerfile: Dockerfile
    container_name: navigation_service
    ports:
      - "8003:8080"
    networks:
      - backend_network
    restart: always

networks:
  backend_network:
    driver: bridge
volumes:
  postgres_data: