input {
  # Filebeat'ten gelen loglar
  beats {
    port => 5044
  }
  
  # TCP üzerinden gelen loglar
  tcp {
    port => 5000
    codec => json
  }
  
  # UDP üzerinden gelen loglar
  udp {
    port => 5000
    codec => json
  }
  
  # HTTP üzerinden gelen loglar
  http {
    port => 8080
    codec => json
  }
}

filter {
  if [type] == "docker" {
    # Docker loglarını işle
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
    }
  }
  
  # Servis adına göre etiketleme
  if [container][labels][com.docker.compose.service] {
    mutate {
      add_field => { "service" => "%{[container][labels][com.docker.compose.service]}" }
    }
  }
  
  # Log seviyesine göre etiketleme
  if [log_level] {
    if [log_level] =~ /ERROR|SEVERE|FATAL/ {
      mutate {
        add_tag => ["error"]
      }
    } else if [log_level] =~ /WARN|WARNING/ {
      mutate {
        add_tag => ["warning"]
      }
    } else if [log_level] =~ /INFO/ {
      mutate {
        add_tag => ["info"]
      }
    } else if [log_level] =~ /DEBUG|TRACE/ {
      mutate {
        add_tag => ["debug"]
      }
    }
  }
  
  # Zaman damgası alanını düzenleme
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
    remove_field => ["timestamp"]
  }
}

output {
  # Tüm logları Elasticsearch'e gönder
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "smart-parking-logs-%{+YYYY.MM.dd}"
  }
  
  # Hata loglarını ayrı bir indekse gönder
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "smart-parking-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug modunda stdout'a da yaz
  stdout {
    codec => rubydebug
  }
} 